# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fight_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

### СОЗДАНИЕ БД
# import random
import shutil
import sqlite3
import uuid

from fight_self import *
# from draw_cards import *




list_for_fight = []


list_of_talants = ['submissions', 'cardio', 'knock_power', 'blocks']

bd = sqlite3.connect('all_fighters.db')

upr = bd.cursor()

upr.execute('''CREATE TABLE IF NOT EXISTS fighters(
            post_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            img BLOB,
            whole_fights INT,
            victories INT,
            defeats INT,
            nones INT,
            power INT,
            experience INT,
            whom_nones TEXT,
            who_is_won TEXT,
            won_by TEXT,
            talant TEXT
            )''')

bd.commit()


import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QMainWindow, QApplication


############################


khabib1 = ''
khabib2 = ''
############################




class Window(QMainWindow):
    def __init__(self, parent=None):
        super(Window, self).__init__(parent)
        self.setGeometry(400, 300, 1330, 870)
        # self.centralwidget = QtWidgets.QWidget(MainWindow)
        # self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(40, 100, 301, 411))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.main_choice_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.main_choice_layout.setContentsMargins(0, 0, 0, 0)
        self.main_choice_layout.setObjectName("main_choice_layout")

        # Кнопка просмотра бойцов
        self.see_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.see_button.setObjectName("see_button")
        self.see_button.setText("Смотреть бойцов")
        self.main_choice_layout.addWidget(self.see_button)

        # Кнопка записи бойцов
        self.wright_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.wright_button.setObjectName("wright_button")
        self.wright_button.setText("Записать бойца")
        self.main_choice_layout.addWidget(self.wright_button)

        # Кнопка выбора бойца для боя
        self.choos_fight_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.choos_fight_button.setObjectName("choos_fight_button")
        self.choos_fight_button.setText("Выбрать бойца для боя")
        self.main_choice_layout.addWidget(self.choos_fight_button)



        # Кнопка чтения новостей
        self.read_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.read_button.setObjectName("read_button")
        self.read_button.setText("Читать новости")
        self.main_choice_layout.addWidget(self.read_button)

        # Кнопка выхода
        self.exit_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.exit_button.setObjectName("exit_button")
        self.exit_button.setText("Выйти")
        self.main_choice_layout.addWidget(self.exit_button)

        # Список бойцов
        self.listView = QtWidgets.QListWidget(self)
        self.listView.setGeometry(QtCore.QRect(380, 100, 381, 191))
        self.listView.setObjectName("listView")

        # Список бойцов для выбора

        self.listView2 = QtWidgets.QListWidget(self)
        self.listView2.setGeometry(QtCore.QRect(380, 100, 381, 191))
        self.listView2.setObjectName("listView2")



        # Заголовок
        self.chapter_label = QtWidgets.QLabel(self)
        self.chapter_label.setGeometry(QtCore.QRect(130, 20, 621, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(36)
        self.chapter_label.setFont(font)
        self.chapter_label.setObjectName("chapter_label")
        self.chapter_label.setText("Чемпионат по борьбе")


        # Главное изображение
        self.label_for_image = QtWidgets.QLabel(self)
        self.label_for_image.setGeometry(QtCore.QRect(380, 310, 381, 201))
        self.label_for_image.setObjectName("label_for_image")
        pixmap = QPixmap('files/anvil.jpg')
        pixmap = pixmap.scaled(381, 201)
        self.label_for_image.setPixmap(pixmap)


        ########################  ВИДЖЕТЫ ВВОДА ДАННЫХ  #############################

        self.enter_line = QtWidgets.QLineEdit(self)
        self.enter_line.setGeometry(600, 100, 100, 30)

        self.name_ent_label = QtWidgets.QLabel(self)
        self.name_ent_label.setGeometry(470, 100, 100, 30)
        self.name_ent_label.setText('Введите имя')

        self.continue_button = QtWidgets.QPushButton(self)
        self.continue_button.setText('Перейти к выбору изображения')
        self.continue_button.setGeometry(470, 150, 230, 30)


        self.save_button = QtWidgets.QPushButton(self)
        self.save_button.setText('Сохранить бойца')
        self.save_button.setGeometry(470, 250, 230, 30)

        self.ex_saving_button = QtWidgets.QPushButton(self)
        self.ex_saving_button.setText('Выйти из режима записи')
        self.ex_saving_button.setGeometry(470, 250, 230, 30)

        self.esc_button = QtWidgets.QPushButton(self)
        self.esc_button.setText('Отмена')
        self.esc_button.setGeometry(470, 200, 230, 30)


        self.enter_line.hide()
        self.continue_button.hide()
        self.save_button.hide()
        self.name_ent_label.hide()
        self.ex_saving_button.hide()
        self.esc_button.hide()


        #####################   Виджеты просмотра бойцов  ###################

        #### Лейбл - имя
        self.name_label_see = QtWidgets.QLabel(self)
        font2 = QtGui.QFont()
        font2.setFamily("Times New Roman")
        font2.setPointSize(16)
        self.name_label_see.setFont(font2)
        self.name_label_see.setGeometry(470, 100, 230, 30)
        self.name_label_see.setText('Имя бойца')

        self.num_fights_label = QtWidgets.QLabel(self)
        font3 = QtGui.QFont()
        font3.setFamily("Times New Roman")
        font3.setPointSize(13)
        self.num_fights_label.setFont(font3)
        self.num_fights_label.setGeometry(400, 130, 230, 30)
        self.num_fights_label.setText('Количество боёв')

        self.num_vic_label = QtWidgets.QLabel(self)
        font3.setPointSize(13)
        self.num_vic_label.setFont(font3)
        self.num_vic_label.setGeometry(400, 160, 230, 30)
        self.num_vic_label.setText('Количество побед')

        self.num_defeats_label = QtWidgets.QLabel(self)
        font3.setPointSize(13)
        self.num_defeats_label.setFont(font3)
        self.num_defeats_label.setGeometry(400, 190, 270, 30)
        self.num_defeats_label.setText('Количество поражений')

        self.num_nones_label = QtWidgets.QLabel(self)
        font3.setPointSize(13)
        self.num_nones_label.setFont(font3)
        self.num_nones_label.setGeometry(400, 220, 230, 30)
        self.num_nones_label.setText('Количество ничьих')

        self.num_ruin_label = QtWidgets.QLabel(self)
        font3.setPointSize(13)
        self.num_ruin_label.setFont(font3)
        self.num_ruin_label.setGeometry(400, 250, 230, 30)
        self.num_ruin_label.setText('Победители:')

        self.num_ruin_list = QtWidgets.QListWidget(self)
        font3.setPointSize(13)
        self.num_ruin_list.setFont(font3)
        self.num_ruin_list.setGeometry(400, 280, 230, 70)

        self.winners_label = QtWidgets.QLabel(self)
        font3.setPointSize(13)
        self.winners_label.setFont(font3)
        self.winners_label.setGeometry(400, 360, 230, 30)
        self.winners_label.setText('Проигравшие')

        self.num_winners_list = QtWidgets.QListWidget(self)
        font3.setPointSize(13)
        self.num_winners_list.setFont(font3)
        self.num_winners_list.setGeometry(400, 390, 230, 70)

        self.nonners_label = QtWidgets.QLabel(self)
        font3.setPointSize(13)
        self.nonners_label.setFont(font3)
        self.nonners_label.setGeometry(400, 470, 230, 30)
        self.nonners_label.setText('С кем ничья')

        self.num_nonners_list = QtWidgets.QListWidget(self)
        font3.setPointSize(13)
        self.num_nonners_list.setFont(font3)
        self.num_nonners_list.setGeometry(400, 500, 230, 70)


        #######################################################################  КАРТЫ

        self.my_card_label1 = QtWidgets.QPushButton(self)
        self.my_card_label1.setGeometry(360, 560, 140, 200)
        self.my_card_label1.setStyleSheet("background-color: rgb(255, 0, 127); border-radius: 20px;")
        self.my_card_label1.setText(f'{my_cards[0]}')

        self.my_card_label2 = QtWidgets.QPushButton(self)
        self.my_card_label2.setGeometry(520, 560, 140, 200)
        self.my_card_label2.setStyleSheet("background-color: rgb(255, 0, 127); border-radius: 20px;")
        self.my_card_label2.setText(f'{my_cards[1]}')

        self.my_card_label3 = QtWidgets.QPushButton(self)
        self.my_card_label3.setGeometry(680, 560, 140, 200)
        self.my_card_label3.setStyleSheet("background-color: rgb(255, 0, 127); border-radius: 20px;")
        self.my_card_label3.setText(f'{my_cards[2]}')

        self.my_card_label4 = QtWidgets.QPushButton(self)
        self.my_card_label4.setGeometry(840, 560, 140, 200)
        self.my_card_label4.setStyleSheet("background-color: rgb(255, 0, 127); border-radius: 20px;")
        self.my_card_label4.setText(f'{my_cards[3]}')

        self.my_card_label5 = QtWidgets.QPushButton(self)
        self.my_card_label5.setGeometry(1000, 560, 140, 200)
        self.my_card_label5.setStyleSheet("background-color: rgb(255, 0, 127); border-radius: 20px;")
        self.my_card_label5.setText(f'{my_cards[4]}')

        self.my_card_label6 = QtWidgets.QPushButton(self)
        self.my_card_label6.setGeometry(1160, 560, 140, 200)
        self.my_card_label6.setStyleSheet("background-color: rgb(255, 0, 127); border-radius: 20px;")
        self.my_card_label6.setText(f'{my_cards[5]}')


        ################################### Прорисовка карты противника после хода

        self.enemy_card_label1 = QtWidgets.QPushButton(self)
        self.enemy_card_label1.setGeometry(160, 560, 140, 200)
        self.enemy_card_label1.setStyleSheet("background-color: rgb(111, 0, 220); border-radius: 20px;")
        self.enemy_card_label1.setText(f'{card2}')

        # # if giving():
        # draw_play_cards()
        ### Вывод портрета

        self.portret = QtWidgets.QLabel(self)
        self.portret.setGeometry(QtCore.QRect(700, 100, 360, 475))
        # self.portret.setObjectName("label_for_image")
        pixmap = QPixmap('files/anvil.jpg')
        pixmap = pixmap.scaled(381, 501)
        self.portret.setPixmap(pixmap)

        self.back_show_button = QtWidgets.QPushButton(self)
        self.back_show_button.setGeometry(400, 590, 230, 30)
        self.back_show_button.setText('Назад')


        ############################################################

        ## Виджеты во время выбора бойцов



        #### ДА


        self.yes_button = QtWidgets.QPushButton(self)
        self.yes_button.setGeometry(740, 460, 300, 57)
        self.yes_button.setText('Выбрать этого бойца для боя')

########### Старт боя


        self.start_fight = QtWidgets.QPushButton(self)
        self.start_fight.setGeometry(400, 200, 300, 50)


        ############### Оформление боя ###################################

        ########### КАРТИНКА 1 И 2 бойца



        self.first_fighter_picture = QtWidgets.QLabel(self)
        self.first_fighter_picture.setGeometry(QtCore.QRect(400, 150, 200, 300))
        pixmap = QPixmap('files/anvil.jpg')
        pixmap = pixmap.scaled(200, 300)
        self.first_fighter_picture.setPixmap(pixmap)

        self.second_fighter_picture = QtWidgets.QLabel(self)
        self.second_fighter_picture.setGeometry(QtCore.QRect(1100, 150, 200, 300))
        pixmap = QPixmap('files/anvil.jpg')
        pixmap = pixmap.scaled(200, 300)
        self.second_fighter_picture.setPixmap(pixmap)

        ##### Лейблы 1 и 2

        self.first_name_label = QtWidgets.QLabel(self)
        self.first_name_label.setGeometry(400, 100, 150, 30)
        self.first_name_label.setText('Имя первого бойца')


        self.second_name_label = QtWidgets.QLabel(self)
        self.second_name_label.setGeometry(1100, 100, 150, 30)
        self.second_name_label.setText('Имя второго бойца')

        ####### центр-лейбл

        self.center_fight_label = QtWidgets.QLabel(self)
        self.center_fight_label.setGeometry(750, 100, 150, 30)
        self.center_fight_label.setText('СОБЫТИЯ БОЯ')




        ##### события боя
        self.button_choice_card = QtWidgets.QPushButton(self)
        self.button_choice_card.setText('События раунда')
        self.button_choice_card.setGeometry(750, 100, 150, 30)
        self.button_choice_card.hide()

        self.event_label = QtWidgets.QLabel(self)
        self.event_label.setGeometry(650, 140, 200, 300)
        self.event_label.hide()

        ### список событий

        self.list_show_events = QtWidgets.QListWidget(self)
        self.list_show_events.setGeometry(QtCore.QRect(657, 150, 381, 191))


        ###############     усталость бойцов

        self.energy1_label = QtWidgets.QLabel(self)
        self.energy1_label.setStyleSheet("color: rgb(255, 0, 127);")
        self.energy1_label.setGeometry(400, 115, 150, 30)

        self.energy2_label = QtWidgets.QLabel(self)
        self.energy2_label.setStyleSheet("color: rgb(255, 0, 127);")
        self.energy2_label.setGeometry(1100, 115, 150, 30)

        ############################# Показатели накопленности


        ########### ЛЕйбл урон

        self.uron_label = QtWidgets.QLabel(self)
        self.uron_label.setGeometry(400, 455, 200, 20)
        self.uron_label.setText('УРОН:')


        self.head1_label = QtWidgets.QLabel(self)
        self.head1_label.setText('Голова')
        self.head1_label.setStyleSheet("color: yellow; background-color: rgb(0, 10, 150)")
        self.head1_label.setGeometry(400, 480, 200, 20)

        self.corp1_label = QtWidgets.QLabel(self)
        self.corp1_label.setText('Корпус')
        self.corp1_label.setStyleSheet("color: yellow; background-color: rgb(0, 10, 150)")
        self.corp1_label.setGeometry(400, 495, 200, 20)

        self.leg1_label = QtWidgets.QLabel(self)
        self.leg1_label.setText('Ноги')
        self.leg1_label.setStyleSheet("color: yellow; background-color: rgb(0, 10, 150)")
        self.leg1_label.setGeometry(400, 510, 200, 20)

        self.uron_label2 = QtWidgets.QLabel(self)
        self.uron_label2.setGeometry(1100, 455, 200, 20)
        self.uron_label2.setText('УРОН:')

        self.head2_label = QtWidgets.QLabel(self)
        self.head2_label.setText('Голова')
        self.head2_label.setStyleSheet("color: yellow; background-color: rgb(0, 10, 150)")
        self.head2_label.setGeometry(1100, 480, 200, 20)

        self.corp2_label = QtWidgets.QLabel(self)
        self.corp2_label.setText('Корпус')
        self.corp2_label.setStyleSheet("color: yellow; background-color: rgb(0, 10, 150)")
        self.corp2_label.setGeometry(1100, 495, 200, 20)

        self.leg2_label = QtWidgets.QLabel(self)
        self.leg2_label.setText('Ноги')
        self.leg2_label.setStyleSheet("color: yellow; background-color: rgb(0, 10, 150)")
        self.leg2_label.setGeometry(1100, 510, 200, 20)


        ### СЧЁТ

        self.score_label = QtWidgets.QLabel(self)
        self.score_label.setGeometry(650, 400, 360, 50)
        self.score_label.setText('Счёт: 0 - 0')
        font4 = QtGui.QFont()
        font4.setFamily("Times New Roman")
        font4.setPointSize(36)
        self.score_label.setFont(font4)

        ##### Итоговый лейбл

        self.victory_label = QtWidgets.QLabel(self)
        self.victory_label.setGeometry(650, 490, 360, 50)
        self.victory_label.setFont(font3)
        if len(VICTORY) > 0:
            self.victory_label.setText(f'{VICTORY[-1]}')



        #### Лейбл таланта
        self.talant1 = QtWidgets.QLabel(self)
        self.talant1.setGeometry(550, 100, 150, 30)

        self.talant2 = QtWidgets.QLabel(self)
        self.talant2.setGeometry(1250, 100, 150, 30)


        ##### КНОПКА ЗАВЕРШЕНИЯ БОЯ И СОХРАНЕНИЯ ДАННЫХ

        self.itog = QtWidgets.QPushButton(self)
        self.itog.setGeometry(650, 790, 360, 50)
        self.itog.setText('Завершить бой')
        if len(VICTORY) > 0:
            # choos_vic()

            self.itog.show()




        #####################   Функции   #########################

        #### Добавление событий в список
        def add_event():
            self.list_show_events.clear()
            for el in list_of_events:
                self.list_show_events.addItem(el)



        #       сокрытие виджетов боя
        def hide_fight_labels():
            print('запустилась функция hide_fight_labels. Она скрывает виджеты боя')
            self.first_name_label.hide()
            self.second_name_label.hide()
            self.center_fight_label.hide()
            self.event_label.hide()
            self.first_fighter_picture.hide()
            self.second_fighter_picture.hide()
            self.list_show_events.hide()

        hide_fight_labels()

        def show_fight_labels():
            print('запустилась функция show_fight_labels. Она показывает виджеты боя')
            self.first_name_label.show()
            self.second_name_label.show()
            self.center_fight_label.show()
            self.event_label.show()
            self.first_fighter_picture.show()
            self.second_fighter_picture.show()
            self.list_show_events.show()


            self.energy1_label.show()
            self.energy2_label.show()
            self.head1_label.show()
            self.head2_label.show()
            self.head2_label.show()
            self.uron_label.show()
            self.uron_label2.show()
            self.corp1_label.show()
            self.corp2_label.show()
            self.leg1_label.show()
            self.leg2_label.show()
            self.score_label.show()

            self.talant1.show()
            self.talant2.show()


        def reopen_fighters(f1, f2):      # ['Бенирус', 'Джитум Зе']

            global khabib1, khabib2

            print('Запустилась функция REOPEN_FIGHTER')
            upr.execute('''SELECT name FROM fighters WHERE name = ?''', (f1,))
            fighter_1 = upr.fetchone()
            for fig in fighter_1:
                FIGHTER_1 = fig
                print(f'Вот боец 1: {fig}')
                khabib1 = fig


            upr.execute('''SELECT name FROM fighters WHERE name = ?''', (f2,))
            fighter_2 = upr.fetchone()
            for fig in fighter_2:
                FIGHTER_2 = fig
                print(f'Вот боец 2: {fig}')
                khabib2 = fig

            ### Сначала надо выбрать карты

            go_to_the_fight(khabib1, khabib2)


            # go_to_the_fight(FIGHTER_1, FIGHTER_2)



        def check_mistakes():
            print('КНОПКА СРАБОТАЛА')
            print(len(list_for_fight))


            self.start_fight.hide()
            f_1 = list_for_fight[0]
            f_2 = list_for_fight[1]
            reopen_fighters(f_1, f_2)

            show_cards()



        ######################## Выбор бойца с картинкой и переход к выбору второго



        def choice_is_done():
            print('CHOIS+IS+DONE')
            global list_for_fight
            shown_string_2 = self.listView.currentItem().text()
            list_for_fight.append(shown_string_2)
            # print(f'Вот список бойцов для боя: {list_for_fight}')

            self.portret.hide()
            self.back_show_button.hide()
            self.name_label_see.hide()
            self.label_for_image.hide()
            self.winners_label.hide()
            self.num_fights_label.hide()
            self.num_nones_label.hide()
            self.num_defeats_label.hide()
            self.num_vic_label.hide()
            self.name_ent_label.hide()
            self.chapter_label.hide()
            self.nonners_label.hide()
            self.num_ruin_label.hide()
            self.num_winners_list.hide()
            self.num_nonners_list.hide()
            self.num_ruin_list.hide()

            self.yes_button.hide()
            if len(list_for_fight) < 2:
                self.listView.show()
                self.read_button.setEnabled(False)
                self.wright_button.setEnabled(False)
                self.choos_fight_button.setEnabled(False)


            if len(list_for_fight) == 2:
                self.start_fight.setText(f'НАЧАТЬ БОЙ {list_for_fight[0]} VS {list_for_fight[1]} !')
                self.start_fight.show()






        self.yes_button.clicked.connect(choice_is_done)






        #TODO Кнока в принципе не реагирует. Ее задача - уничтожить ненужные лейблы и начать второй выбор



        ##### ПОКАЗ ОТДЕЛЬНЫХ БОЙЦОВ

        def show_object():
            # self.choos_fight_button_surtain.hide()

            show_fighter()

            self.listView.hide()


            print('Запустилась функция show_object')
            self.num_winners_list.clear()
            self.num_ruin_list.clear()
            shown_string = self.listView.currentItem().text()
            # print('ВОт кнопка, которую вы нажали')
            # print(shown_string)

            upr.execute('''SELECT name FROM fighters WHERE name = ?''', (shown_string,))
            ch = upr.fetchone()
            # print('Вот инфа из БД')
            # print(ch)
            self.name_label_see.setText(f'{shown_string}')

            upr.execute('''SELECT whole_fights FROM fighters WHERE name = ?''', (shown_string,))
            all_fights = upr.fetchone()
            self.num_fights_label.setText(f'Количесвто боёв: {all_fights}')

            upr.execute('''SELECT victories FROM fighters WHERE name = ?''', (shown_string,))
            all_vic = upr.fetchone()
            self.num_vic_label.setText(f'Количесвто побед: {all_vic}')

            upr.execute('''SELECT defeats FROM fighters WHERE name = ?''', (shown_string,))
            all_def = upr.fetchone()
            self.num_defeats_label.setText(f'Количесвто поражений: {all_def}')

            upr.execute('''SELECT nones FROM fighters WHERE name = ?''', (shown_string,))
            all_non = upr.fetchone()
            self.num_nones_label.setText(f'Количесвто ничьих: {all_non}')

            upr.execute('''SELECT nones FROM fighters WHERE name = ?''', (shown_string,))
            all_non = upr.fetchone()
            self.num_nones_label.setText(f'Количесвто ничьих: {all_non}')

            ### ОБновление списка обыгранных
            upr.execute("""SELECT who_is_won FROM fighters WHERE name = ? """, (shown_string,))
            tuple_for_split = upr.fetchone()
            # print(tuple_for_split)
            string_for_split = tuple_for_split[0]

            # print('СТрока?')
            # print(f"Вот она >{string_for_split}<")


            split_list = string_for_split.split(sep='\n')
            # print(f" Вот дожна быть разделённая строка - {split_list}")
            # print('Next step')

            for object5 in split_list:
                if object5 != '':
                    # self.num_ruin_list.addItem(object)
                    print(f"ВОт что мы пишем : {object5}")

                    self.num_winners_list.addItem(object5)

            ### ОБновление списка выигравших
            # print(f'Another step. To base')
            # print(shown_string)
            upr.execute("""SELECT won_by FROM fighters WHERE name = ? """, (shown_string,))
            tuple_for_split2 = upr.fetchone()
            # print(tuple_for_split2)
            string_for_split2 = tuple_for_split2[0]

            # print('СТрока?')
            # print(f'>{string_for_split2}<')

            split_list2 = string_for_split2.split(sep='\n')
            # print(split_list2)

            for object in split_list2:
                if object != '':
                    self.num_ruin_list.addItem(object)



            #### ВЫВОД ПОРТРЕТА


            upr.execute('''SELECT img FROM fighters WHERE name = ?''', (shown_string,))
            image = upr.fetchall()
            # print('Вот картинка из БД')
            # print(image)
            for el in image:
                pixmap = QPixmap(el[0])
                pixmap = pixmap.scaled(381, 501)
                self.portret.setPixmap(pixmap)


        ##### ПОКАЗ ВСЕХ БОЙЦОВ

        def list_of_fighters():
            print('Запустилась функция LIST_OF_FIGHTERS')
            hide_fighters()
            self.listView2.hide()



            self.listView.clear()
            upr.execute("""SELECT * FROM fighters""")
            one_result = upr.fetchall()
            for object in one_result:

                self.listView.addItem(object[1])
                # print(object)
            self.listView.show()

        def choose_for_fight():
            print('Запустилась функция CHOOSE_FOR_FIGHT, в которой появляется кнопка ВЫБРАТЬ')
            list_of_enemies = []




            hide_fighters()

            self.listView2.clear()
            upr.execute("""SELECT * FROM fighters""")
            one_result = upr.fetchall()
            for object in one_result:
                self.listView2.addItem(object[1])
                list_of_enemies.append(object[1])
                # print(object)
            self.listView2.show()

            print(list_of_enemies)

        def this_is_the_fighter():
            print('ЗАПУСТИЛАСЬ THIS IS')
            shown_string2 = self.listView2.currentItem().text()


            self.text_choice.show()
            self.yes_button.show()



            upr.execute('''SELECT img FROM fighters WHERE name = ?''', (shown_string2,))
            image = upr.fetchall()
            # print('Вот картинка из БД')
            # print(image)
            for el in image:
                pixmap = QPixmap(el[0])
                pixmap = pixmap.scaled(381, 501)
                self.portret.setPixmap(pixmap)



        self.listView2.itemDoubleClicked.connect(this_is_the_fighter)
            # self.choos_fight_button_surtain.




        ### Сокрытие показа бойца

        def hide_fighters():

            print('ВОТ HIDE_FIGHTERS')
            self.name_label_see.hide()
            self.num_fights_label.hide()
            self.num_nones_label.hide()
            self.num_defeats_label.hide()
            self.num_vic_label.hide()
            self.num_ruin_label.hide()
            self.num_ruin_list.hide()
            self.num_winners_list.hide()
            self.winners_label.hide()
            self.nonners_label.hide()
            self.num_nonners_list.hide()
            self.portret.hide()
            self.back_show_button.hide()
            self.yes_button.hide()
            self.start_fight.hide()

            self.my_card_label1.hide()
            self.my_card_label2.hide()
            self.my_card_label3.hide()
            self.my_card_label4.hide()
            self.my_card_label5.hide()
            self.my_card_label6.hide()
            self.enemy_card_label1.hide()
            self.energy1_label.hide()
            self.energy2_label.hide()
            self.head1_label.hide()
            self.head2_label.hide()
            self.uron_label.hide()
            self.uron_label2.hide()
            self.corp1_label.hide()
            self.corp2_label.hide()
            self.leg1_label.hide()
            self.leg2_label.hide()

            self.score_label.hide()
            self.talant1.hide()
            self.talant2.hide()

            self.first_fighter_picture.hide()
            self.second_fighter_picture.hide()
            self.list_show_events.hide()
            self.first_name_label.hide()
            self.second_name_label.hide()
            self.center_fight_label.hide()
            self.victory_label.hide()

            self.itog.hide()





        hide_fighters()

        def show_fighter():
            print('Запустилась функция SHOW_FIGHTER')
            self.label_for_image.hide()
            self.listView.hide()


            self.name_label_see.show()
            self.num_fights_label.show()
            self.num_nones_label.show()
            self.num_defeats_label.show()
            self.num_vic_label.show()
            self.num_ruin_label.show()
            self.num_ruin_list.show()
            self.num_winners_list.show()
            self.winners_label.show()
            self.nonners_label.show()
            self.num_nonners_list.show()
            self.portret.show()
            self.back_show_button.show()
            self.yes_button.show()


        # draw_play_cards()



        def exit_saving():
            self.enter_line.hide()
            self.continue_button.hide()
            self.save_button.hide()
            self.name_ent_label.hide()
            self.ex_saving_button.hide()
            self.esc_button.hide()



        def enter_info():

            self.label_for_image.show()
            pixmap = QPixmap('files/scroll.jpg')
            pixmap = pixmap.scaled(381, 201)
            self.label_for_image.setPixmap(pixmap)

            print('Запустилась функция ENTER_INFO')
            self.listView.hide()

            self.enter_line.show()
            self.esc_button.show()
            self.name_ent_label.show()

            def choice_picture():

                # entered_name = self.enter_name.text()
                img_choice = QtWidgets.QFileDialog.getOpenFileName(parent=self, caption='Выбор картинки', directory='C:\\',
                                                               filter="Images (*.jpg)")

                my_img = img_choice[0]
                unic_name = str((uuid.uuid4()))
                new_photo = shutil.copyfile(my_img, f'C:/PythonWorks/fights_with_base/files/{unic_name}.jpg')

                self.save_button.show()


                def saving():
                    print('Запустилась функция SAVING')
                    entered_name = self.enter_line.text()
                    self.enter_line.clear()
                    # print(entered_name)
                    # print(new_photo)
                    if entered_name != '':
                        upr.execute('''INSERT INTO fighters(name, img, whole_fights, victories, defeats, nones, power, 
                        experience, whom_nones, who_is_won, won_by, talant) 
                        VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                                    (entered_name, new_photo, 0, 0, 0, 0, int(random.choice([8, 9, 10, 11])), 0, '', '', '',
                                     random.choice(list_of_talants)))

                        # print(entered_name)
                        # print(new_photo)


                        bd.commit()
                        print('Данные сохранены')
                    else:
                        print('Что-то пошло не так!')

                    self.save_button.hide()
                    self.ex_saving_button.show()

                self.save_button.clicked.connect(saving)
            self.continue_button.show()
            self.continue_button.clicked.connect(choice_picture)

        def show_cards():

            add_event()
            self.first_name_label.setText(f'{khabib1}')
            self.second_name_label.setText(f'{khabib2}')

            upr.execute('''SELECT img FROM fighters WHERE name = ?''', (khabib1,))
            image = upr.fetchall()
            # print('Вот картинка из БД')
            # print(image)
            for el in image:
                pixmap = QPixmap(el[0])
                pixmap = pixmap.scaled(200, 300)
                self.first_fighter_picture.setPixmap(pixmap)
            # self.first_fighter_picture.

            upr.execute('''SELECT img FROM fighters WHERE name = ?''', (khabib2,))

            image = upr.fetchall()
            # print('Вот картинка из БД')
            # print(image)
            for el in image:
                pixmap = QPixmap(el[0])
                pixmap = pixmap.scaled(200, 300)
                self.second_fighter_picture.setPixmap(pixmap)

            self.my_card_label1.show()
            self.my_card_label2.show()
            self.my_card_label3.show()
            self.my_card_label4.show()
            self.my_card_label5.show()
            self.my_card_label6.show()

        def talant(talant1, talant2):
            global tal, tal2
            if talant1 == 'knock_power':
                tal = 'Нокаутёр'
            if talant1 == 'cardio':
                tal = 'Выносливость'
            if talant1 == 'blocks':
                tal = 'Защита'

            if talant2 == 'knock_power':
                tal2 = 'Нокаутёр'
            if talant2 == 'cardio':
                tal2 = 'Выносливость'
            if talant2 == 'blocks':
                tal2 = 'Защита'

            self.talant1.setText(f'{tal}')
            self.talant2.setText(f'{tal2}')

        def choos_vic():
            global C_V
            print('Запустилась функция выбора победы')
            print(VICTORY)
            if len(VICTORY) > 0:
                true_victory = itog_list[0]
                print(f'Вот выбор: {true_victory}')
                self.victory_label.setText(true_victory)
                self.victory_label.show()
            self.itog.show()

        if len(VICTORY) > 0:
            choos_vic()






        def card_1():
            
            print('Нажато 1')

            self.my_card_label1.hide()
            card1 = my_cards[0]
            card2 = random.choice(enemy_cards)
            enemy_cards.remove(card2)

            round_1(knock_1, knock_2, power_1, power_2, cardio_1, cardio_2, 0, 0, exp_1, exp_2,
                  card1, card2)

            print(f'ВОТ СПИСОК СОБЫТИЙ: {list_of_events}')

            global cardio_g_1

            self.enemy_card_label1.show()
            self.enemy_card_label1.setText(f'{card2}')



            self.energy1_label.setText(f'{list_of_energy1[-1]}')
            self.energy2_label.setText(f'{list_of_energy2[-1]}')
            self.head1_label.setText(f'Голова: {list_of_head1[-1]}')
            self.head2_label.setText(f'Голова: {list_of_head2[-1]}')
            self.corp1_label.setText(f'Корпус: {list_of_corp1[-1]}')
            self.corp2_label.setText(f'Корпус: {list_of_corp2[-1]}')
            self.leg1_label.setText(f'Ноги: {list_of_leg1[-1]}')
            self.leg2_label.setText(f'Ноги: {list_of_leg2[-1]}')

            self.score_label.setText(f'СЧЁT: {round(list_of_points1[-1])} - {round(list_of_points2[-1])}')

            # self.victory_label.setText(f'{VICTORY[-1]}')
            if len(VICTORY) > 0:
                choos_vic()




        def card_2():
            print('Нажато 2')

            self.my_card_label2.hide()
            card1 = my_cards[1]
            card2 = random.choice(enemy_cards)
            enemy_cards.remove(card2)
            print(f'Вот список событий {list_of_events}')

            round_1(knock_1, knock_2, power_1, power_2, cardio_1, cardio_2, 0, 0, exp_1, exp_2,
                    card1, card2)

            self.enemy_card_label1.show()
            self.enemy_card_label1.setText(f'{card2}')


            self.energy1_label.setText(f'{list_of_energy1[-1]}')
            self.energy2_label.setText(f'{list_of_energy2[-1]}')
            self.head1_label.setText(f'Голова: {list_of_head1[-1]}')
            self.head2_label.setText(f'Голова: {list_of_head2[-1]}')
            self.corp1_label.setText(f'Корпус: {list_of_corp1[-1]}')
            self.corp2_label.setText(f'Корпус: {list_of_corp2[-1]}')
            self.leg1_label.setText(f'Ноги: {list_of_leg1[-1]}')
            self.leg2_label.setText(f'Ноги: {list_of_leg2[-1]}')

            self.score_label.setText(f'СЧЁT: {list_of_points1[-1]} - {list_of_points2[-1]}')


            # self.victory_label.setText(f'{VICTORY[-1]}')
            if len(VICTORY) > 0:
                choos_vic()

        def card_3():
            print('Нажато 3')
            self.my_card_label3.hide()
            card1 = my_cards[2]
            card2 = random.choice(enemy_cards)
            enemy_cards.remove(card2)
            print(f'Вот список событий {list_of_events}')

            round_1(knock_1, knock_2, power_1, power_2, cardio_1, cardio_2, 0, 0, exp_1, exp_2,
                    card1, card2)

            self.enemy_card_label1.show()
            self.enemy_card_label1.setText(f'{card2}')

            self.energy1_label.setText(f'{list_of_energy1[-1]}')
            self.energy2_label.setText(f'{list_of_energy2[-1]}')
            self.head1_label.setText(f'Голова: {list_of_head1[-1]}')
            self.head2_label.setText(f'Голова: {list_of_head2[-1]}')
            self.corp1_label.setText(f'Корпус: {list_of_corp1[-1]}')
            self.corp2_label.setText(f'Корпус: {list_of_corp2[-1]}')
            self.leg1_label.setText(f'Ноги: {list_of_leg1[-1]}')
            self.leg2_label.setText(f'Ноги: {list_of_leg2[-1]}')

            self.score_label.setText(f'СЧЁT: {list_of_points1[-1]} - {list_of_points2[-1]}')

            # self.victory_label.setText(VICTORY[-1])
            if len(VICTORY) > 0:
                choos_vic()


        def card_4():
            print('Нажато 4')
            self.my_card_label4.hide()
            card1 = my_cards[3]
            card2 = random.choice(enemy_cards)
            enemy_cards.remove(card2)
            print(f'Вот список событий {list_of_events}')

            round_1(knock_1, knock_2, power_1, power_2, cardio_1, cardio_2, 0, 0, exp_1, exp_2,
                    card1, card2)

            self.enemy_card_label1.show()
            self.enemy_card_label1.setText(f'{card2}')

            self.energy1_label.setText(f'{list_of_energy1[-1]}')
            self.energy2_label.setText(f'{list_of_energy2[-1]}')
            self.head1_label.setText(f'Голова: {list_of_head1[-1]}')
            self.head2_label.setText(f'Голова: {list_of_head2[-1]}')
            self.corp1_label.setText(f'Корпус: {list_of_corp1[-1]}')
            self.corp2_label.setText(f'Корпус: {list_of_corp2[-1]}')
            self.leg1_label.setText(f'Ноги: {list_of_leg1[-1]}')
            self.leg2_label.setText(f'Ноги: {list_of_leg2[-1]}')

            self.score_label.setText(f'СЧЁT: {list_of_points1[-1]} - {list_of_points2[-1]}')

            # self.victory_label.setText(f'{VICTORY[-1]}')
            if len(VICTORY) > 0:
                choos_vic()


        def card_5():
            print('Нажато 5')
            self.my_card_label5.hide()
            card1 = my_cards[4]

            card2 = random.choice(enemy_cards)
            enemy_cards.remove(card2)
            print(f'Вот список событий {list_of_events}')

            round_1(knock_1, knock_2, power_1, power_2, cardio_1, cardio_2, 0, 0, exp_1, exp_2,
                    card1, card2)

            self.enemy_card_label1.show()
            self.enemy_card_label1.setText(f'{card2}')

            self.energy1_label.setText(f'{list_of_energy1[-1]}')
            self.energy2_label.setText(f'{list_of_energy2[-1]}')
            self.head1_label.setText(f'Голова: {list_of_head1[-1]}')
            self.head2_label.setText(f'Голова: {list_of_head2[-1]}')
            self.corp1_label.setText(f'Корпус: {list_of_corp1[-1]}')
            self.corp2_label.setText(f'Корпус: {list_of_corp2[-1]}')
            self.leg1_label.setText(f'Ноги: {list_of_leg1[-1]}')
            self.leg2_label.setText(f'Ноги: {list_of_leg2[-1]}')

            self.score_label.setText(f'СЧЁT: {list_of_points1[-1]} - {list_of_points2[-1]}')

            # self.victory_label.setText(f'{VICTORY[-1]}')
            if len(VICTORY) > 0:
                choos_vic()

        def card_6():
            print('Нажато 6')
            self.my_card_label6.hide()
            card1 = my_cards[5]

            card2 = random.choice(enemy_cards)
            enemy_cards.remove(card2)
            print(f'Вот список событий {list_of_events}')

            round_1(knock_1, knock_2, power_1, power_2, cardio_1, cardio_2, 0, 0, exp_1, exp_2,
                    card1, card2)

            self.enemy_card_label1.show()
            self.enemy_card_label1.setText(f'{card2}')

            self.energy1_label.setText(f'{list_of_energy1[-1]}')
            self.energy2_label.setText(f'{list_of_energy2[-1]}')
            self.head1_label.setText(f'Голова: {list_of_head1[-1]}')
            self.head2_label.setText(f'Голова: {list_of_head2[-1]}')
            self.corp1_label.setText(f'Корпус: {list_of_corp1[-1]}')
            self.corp2_label.setText(f'Корпус: {list_of_corp2[-1]}')
            self.leg1_label.setText(f'Ноги: {list_of_leg1[-1]}')
            self.leg2_label.setText(f'Ноги: {list_of_leg2[-1]}')

            self.score_label.setText(f'СЧЁT: {list_of_points1[-1]} - {list_of_points2[-1]}')

            # self.victory_label.setText(f'{VICTORY[-1]}')
            if len(VICTORY) > 0:
                choos_vic()

        def go_to_the_fight(F1, F2):
            print('Запустиласьфункция GO_TO_THE_FIGHT')
            # Определяем данные первого бойца из БД

            list_of_fighter_talants = []

            global knock_1, knock_2, power_1, power_2, cardio_1, cardio_2, exp_1, exp_2

            # print('НА этапе 1 работает')
            upr.execute(f'''SELECT * FROM fighters WHERE name = ?''', (F1,))
            prom_1 = upr.fetchall()

            # print('НА этапе 2 работает')
            # print(prom_1)
            # Определяем данные второго бойца из БД
            upr.execute(f'''SELECT * FROM fighters WHERE name = ?''', (F2,))
            prom_2 = upr.fetchall()

            # print('НА этапе 3 работает')
            # print(prom_2)
            # print(type(data_2), len(data_2))
            for obj in prom_1:
                i = 1
                if i == 1:
                    # print(obj)
                    list_of_fighter_talants.append(obj[12])
                    # print(list_of_fighter_talants)

                if obj[12] == 'knock_power':
                    knock_1 = 1
                if obj[12] != 'knock_power':
                    knock_1 = 0
                if obj[12] == 'cardio':
                    cardio_1 = 11
                if obj[12] != 'cardio':
                    cardio_1 = 10

                power_1 = obj[7]
                # print(f'Вот сила 1 бойца {power_1}')
                sub_1 = 0
                exp_1 = obj[8]
                print(exp_1)
                self.energy1_label.setText(str(cardio_1))
                # self.energy2_label.setText(str(cardio_2))
                print('ВОТ КАРДИО 2')
                # print(str(cardio_2))
                i += 1

            print('НА этапе 4 работает')

            for obj in prom_2:
                i = 1
                if i == 1:
                    # print(obj)
                    # print(obj[12])
                    list_of_fighter_talants.append(obj[12])
                    # print(f'Вот список талантов для боя: {list_of_fighter_talants}')


                if obj[12] == 'knock_power':
                    knock_2 = 1
                    # print('У бойца 2 нокаутирующая мощь')
                if obj[12] != 'knock_power':
                    knock_2 = 0
                if obj[12] == 'cardio':
                    cardio_2 = 11
                if obj[12] != 'cardio':
                    cardio_2 = 10

                    self.energy2_label.setText(f'{cardio_2}')
                i += 1

                power_2 = obj[7]
                # print(f'Вот сила 2 бойца {power_2}')
                sub_2 = 0
                exp_2 = obj[8]
                # self.energy1_label.setText(cardio_1)





                talant(list_of_fighter_talants[0], list_of_fighter_talants[1])

            print(knock_1, knock_2, power_1, power_2, cardio_1, cardio_2, exp_1, exp_2)


            print('Функция отработала')


        def end_fight():
            # global real_old_defeats, new_srting, new_srting2
            # global list_for_fight

            global real_old_defeats, new_srting, new_srting2, list_of_points1, list_of_points2
            global list_for_fight

            print('ЗАПУСКАЕМ КОНЕЦ БОЯ!')
            victor = ''
            loser = ''
            if ('оец 1' in self.victory_label.text()) or ('цу 1' in self.victory_label.text()) or ('от 1 б' in self.victory_label.text()):
                print(f'Победитель: {self.first_name_label.text()}')
                victor = self.first_name_label.text()
                loser = self.second_name_label.text()
                print(f'Проигравший: {loser}')
            if ('оец 2' in self.victory_label.text()) or ('цу 2' in self.victory_label.text()) or ('от 2 б' in self.victory_label.text()):
                print(f'Победитель: {self.second_name_label.text()}')
                victor = self.second_name_label.text()
                loser = self.first_name_label.text()
                print(f'Проигравший: {loser}')
            if 'ничья' in self.victory_label.text():
                print('Ничья!')

            upr.execute("""SELECT victories FROM fighters WHERE name = ?""", (victor,))
            whole_victories = upr.fetchone()

            ### Добавление победы

            for el in whole_victories:
                res_t = int(el)
            new_victories = res_t + 1
            print(new_victories)

            upr.execute("""UPDATE fighters SET victories = ? WHERE name = ?""", (new_victories, victor))
            bd.commit()

            print('Первая часть успешна')

            upr.execute("""SELECT defeats FROM fighters WHERE name = ?""", (loser,))
            old_defeats = upr.fetchone()
            for el in old_defeats:
                real_old_defeats = int(el)
            print('ВОт здесь?')
            print(real_old_defeats)


            print('Втроая часть успешна')

            new_defeats = real_old_defeats + 1
            print(new_defeats)
            print(f'Вот данные: {new_defeats}, {loser}')
            upr.execute("""UPDATE fighters SET defeats = ? WHERE name = ?""", (new_defeats, loser))
            bd.commit()
            print('Проверка данных из БД + 1')
            print(new_defeats)

            print('Третья часть успешна')


            ### Обновление списка обыгранных


            upr.execute("""SELECT who_is_won FROM fighters WHERE name = ?""", (victor,))
            loosers = upr.fetchall()
            # print('Получилось?')
            print(loosers)
            # print('Идём далее')
            ## ПОлучение строки
            turple_loosers = loosers[0]
            # print(turple_loosers)
            str_loosers = turple_loosers[0]
            # print(str_loosers)

            new_srting = (str_loosers + '\n' + loser).lstrip()
            # print('ВОт новая строка для записи')
            # print(new_srting)


            upr.execute('''UPDATE fighters SET who_is_won = ? WHERE NAME = ?''', (new_srting, victor))
            bd.commit()

            ### Обновление списка выигравших

            upr.execute("""SELECT won_by FROM fighters WHERE name = ?""", (loser,))
            winners = upr.fetchall()
            # print('Получилось теперь?')
            # print(winners)
            # print('Идём далее')
            ## ПОлучение строки
            turple_winners = winners[0]
            # print(turple_winners)
            str_winners = turple_winners[0]
            # print(str_loosers)

            new_srting2 = str_winners + '\n' + victor
            # print('ВОт новая строка победителей для записи')
            # print(new_srting2)

            upr.execute('''UPDATE fighters SET won_by = ? WHERE NAME = ?''', (new_srting2, loser))
            bd.commit()

            # global list_of_events
            # global num_round
            # global VICTORY
            # global itog_list
            #



            hide_fighters()



        # def clear_data():

            # global real_old_defeats, new_srting, new_srting2, list_of_points1, list_of_points2
            # global list_for_fight
            self.list_show_events.clear()
            list_for_fight = []

            new_srting = ''
            new_srting2 = ''

            # self.energy1_label.setText(f'{list_of_energy1[-1]}')
            # self.energy2_label.setText(f'{list_of_energy2[-1]}')
            list_of_energy1 = []
            list_of_energy2 = []


            self.head1_label.setText('Голова: 0')
            self.head2_label.setText('Голова: 0')
            self.corp1_label.setText('Корпус: 0')
            self.corp2_label.setText('Корпус: 0')
            self.leg1_label.setText('Ноги: 0')
            self.leg2_label.setText('Ноги: 0')

            self.score_label.clear()
            self.victory_label.clear()
            self.list_show_events.clear()
            self.energy1_label.clear()
            self.energy2_label.clear()

            self.num_ruin_list.clear()
            self.num_winners_list.clear()

            list_of_points1 = []
            list_of_points2 = []

            print('Cleared')

        ################################### КНОПКИ ###############################################

        self.itog.clicked.connect(end_fight)

        self.wright_button.clicked.connect(enter_info)
        self.ex_saving_button.clicked.connect(exit_saving)
        self.esc_button.clicked.connect(exit_saving)
        self.back_show_button.clicked.connect(list_of_fighters)
        # self.see_button.clicked.connect(show_fighter)
        self.see_button.clicked.connect(list_of_fighters)
        self.see_button.clicked.connect(hide_fighters)
        self.listView.itemDoubleClicked.connect(show_object)
        # self.listView2.itemDoubleClicked.connect(show_choice_fighter)
        self.choos_fight_button.clicked.connect(choose_for_fight)
        # if len(list_for_fight) == 2:
        #     self.start_fight.clicked.connect(reopen_fighters(list_for_fight))
        self.start_fight.clicked.connect(check_mistakes)
        self.start_fight.clicked.connect(show_fight_labels)

        # self.exit_button.clicked.connect(draw_play_cards)
        # self.exit_button.clicked.connect(clear_data)

        ## Кнопки карт
        if VIC_FLAG == False:
            self.my_card_label1.clicked.connect(card_1)
            self.my_card_label1.clicked.connect(add_event)
            self.my_card_label2.clicked.connect(card_2)
            self.my_card_label2.clicked.connect(add_event)
            self.my_card_label3.clicked.connect(card_3)
            self.my_card_label3.clicked.connect(add_event)
            self.my_card_label4.clicked.connect(card_4)
            self.my_card_label4.clicked.connect(add_event)
            self.my_card_label5.clicked.connect(card_5)
            self.my_card_label5.clicked.connect(add_event)
            self.my_card_label6.clicked.connect(card_6)
            self.my_card_label6.clicked.connect(add_event)



        ###########################  ПОКАЗ ВСЕГО  #################################
        self.show()

app = QApplication(sys.argv)
window = Window()
sys.exit(app.exec_())

